// Read ROOT trees 
// Sam Grant

#include <iostream>
#include <vector>

#include "Plotter.h"
#include "TFile.h"
#include "TTree.h"
#include "TTreeReader.h"
#include "TF1.h"
#include "TH1D.h"
#include "TH2D.h"
#include "TMath.h"
#include "TVector3.h"
#include "TRandom3.h"
#include "TGraphErrors.h"

using namespace std;

double omegaAMagic = 0.00143934; // from gm2geom consts / kHz 
double g2Period = (2*TMath::Pi()/omegaAMagic) * 1e-3; // 4.3653239 us
double mMu = 105.6583715; // MeV
double aMu = 11659208.9e-10; 
double gmagic = std::sqrt( 1.+1./aMu );
double pmax = 1.01 * mMu * gmagic; // 3127.1144
double T_c = 149.2 * 1e-3; // cyclotron period [us]

double pLo = 750; 
double pHi = 2500;

TTree *InitTree(string fileName, string treeName) { 

   // ++++++++++++++ Open tree and load branches ++++++++++++++
   // Get file
   TFile *fin = TFile::Open(fileName.c_str());
   cout<<"\nOpened tree:\t"<<fileName<<" "<<fin<<endl;

   // Get tree
   TTree *tree = (TTree*)fin->Get(treeName.c_str());

   cout<<"\nOpened tree:"<<treeName<<" "<<tree<<" from file "<<fileName<<" "<<fin<<endl;

   return tree;

}

double ModTime(double time, int nPeriods = 1) {

  double g2fracTime = time / (nPeriods * g2Period);
  int g2fracTimeInt = int(g2fracTime);
  double g2ModTime = (g2fracTime - g2fracTimeInt) * nPeriods * g2Period;

  return g2ModTime;

}

double RandomisedTime(TRandom3 *rand, double time) { 
  return rand->Uniform(time-T_c/2, time+T_c/2);
}

void Run(TTree *tree, TFile *output, string dataset="Run-1a", bool quality=true, bool timeRandomisation=true, bool verticalOffsetCorrection=true) {

  int moduloMultiple = 4;
  // Vertical angle boost the lab frame, totally "made up" number
  double boostFactor = 1;//5e3*gmagic;

  string stns[] = {"S12S18", "S12", "S18"}; 

  int n_stn = sizeof(stns)/sizeof(stns[0]);

  TH1D *momentum_[n_stn];
  TH1D *momY_[n_stn];
  TH1D *momX_[n_stn];
  TH1D *momZ_[n_stn];
  TH1D *wiggle_[n_stn];
  TH1D *wiggle_mod_[n_stn];
  TH1D *wiggle_mod_long_[n_stn];
  TH1D *thetaY_[n_stn];
  TH2D *thetaY_vs_time_[n_stn];
  TH2D *thetaY_vs_time_50ns_[n_stn];
  TH2D *thetaY_vs_time_mod_[n_stn];
  TH2D *thetaY_vs_time_mod_50ns_[n_stn];
  TH2D *thetaY_vs_time_mod_long_[n_stn];
  TH2D *thetaY_vs_time_mod_long_50ns_[n_stn];
  TH2D *decayZ_vs_decayX_[n_stn];

  // Other scans 
  vector<TH1D*> thetaY_mom_slices_[n_stn];
  vector<TH1D*> Y_mom_slices_[n_stn];
  vector<TH1D*> pY_mom_slices_[n_stn];
  vector<TH1D*> p_mom_slices_[n_stn];
  vector<TH1D*> alpha_mom_slices_[n_stn];

  // Momentum scans of mod 
  vector<TH2D*> thetaY_vs_time_mod_slices_[n_stn];
  vector<TH2D*> thetaY_vs_time_mod_50ns_slices_[n_stn];
  vector<TH2D*> thetaY_vs_time_mod_long_slices_[n_stn];
  vector<TH2D*> thetaY_vs_time_mod_long_50ns_slices_[n_stn];

  // Slice momentum
  int step = 125;
  int nSlices = pmax/step;

  // Vertical offset correction 
  TFile *verticalOffsetCorrectionFile = TFile::Open(("correctionPlots/verticalOffsetFits_"+dataset+"_"+to_string(step)+"MeV_BQ.root").c_str()); 
  vector<vector<TF1*>> verticalOffsetFits_; 

  for (int i_stn = 0; i_stn < n_stn; i_stn++) { 

    vector<TF1*> verticalOffsetFitsPerStn_;

    momentum_[i_stn] = new TH1D((stns[i_stn]+"_Momentum").c_str(), ";Track momentum [MeV];Tracks", int(pmax), 0, pmax); 
    momY_[i_stn] = new TH1D((stns[i_stn]+"_MomentumY").c_str(), ";Track momentum Y [MeV];Tracks", 1000, -60, 60); 
    momX_[i_stn] = new TH1D((stns[i_stn]+"_MomentumX").c_str(), ";Track momentum X [MeV];Tracks", int(pmax), -pmax, pmax); 
    momZ_[i_stn] = new TH1D((stns[i_stn]+"_MomentumZ").c_str(), ";Track momentum Z [MeV];Tracks", int(pmax), -pmax, pmax); 
    wiggle_[i_stn] = new TH1D((stns[i_stn]+"_Wiggle").c_str(), ";Decay time [#mus];Tracks", 2700, 0, 2700*T_c);
    wiggle_mod_[i_stn] = new TH1D((stns[i_stn]+"_Wiggle_Modulo").c_str(), ";t_{g#minus2}^{mod} [#mus];Tracks / 149.2 ns", 29, 0, g2Period); 
    wiggle_mod_long_[i_stn] = new TH1D((stns[i_stn]+"_Wiggle_Modulo_Long").c_str(), ";Time modulo [#mus];Tracks / 149.2 ns", 41*moduloMultiple, 0, g2Period*moduloMultiple); 
    thetaY_[i_stn] = new TH1D((stns[i_stn]+"_ThetaY").c_str(), ";#theta_{y} [mrad];Tracks", 1000, -TMath::Pi()*boostFactor, TMath::Pi()*boostFactor);
    thetaY_vs_time_[i_stn] = new TH2D((stns[i_stn]+"_ThetaY_vs_Time").c_str(), ";Decay time [#mus]; #theta_{y} [mrad] / 149.2 ns ", 2700, 0, 2700*T_c, 1000, -TMath::Pi()*boostFactor, TMath::Pi()*boostFactor);
    thetaY_vs_time_50ns_[i_stn] = new TH2D((stns[i_stn]+"_ThetaY_vs_Time_50ns").c_str(), ";Decay time [#mus]; #theta_{y} [mrad] / 50 ns ", 8000, 0, 8000*50*1e-3, 1000, -TMath::Pi()*boostFactor, TMath::Pi()*boostFactor);
    thetaY_vs_time_mod_[i_stn] = new TH2D((stns[i_stn]+"_ThetaY_vs_Time_Modulo").c_str(), ";t_{g#minus2}^{mod} [#mus]; #theta_{y} [mrad] / 149.2 ns", 29, 0, g2Period, 1000, -TMath::Pi()*boostFactor, TMath::Pi()*boostFactor);
    thetaY_vs_time_mod_50ns_[i_stn] = new TH2D((stns[i_stn]+"_ThetaY_vs_Time_Modulo_50ns").c_str(), ";t_{g#minus2}^{mod} [#mus]; #theta_{y} [mrad] / 50 ns", 87, 0, g2Period, 1000, -TMath::Pi()*boostFactor, TMath::Pi()*boostFactor);
    thetaY_vs_time_mod_long_[i_stn] = new TH2D((stns[i_stn]+"_ThetaY_vs_Time_Modulo_Long").c_str(), ";Time modulo [#mus]; #theta_{y} [mrad] / 149.2 ns", 29*moduloMultiple, 0, g2Period*moduloMultiple, 1000, -TMath::Pi()*boostFactor, TMath::Pi()*boostFactor);
    thetaY_vs_time_mod_long_50ns_[i_stn] = new TH2D((stns[i_stn]+"_ThetaY_vs_Time_Modulo_Long_50ns").c_str(), ";Time modulo [#mus]; #theta_{y} [mrad] / 50 ns", 87*moduloMultiple, 0, g2Period*moduloMultiple, 1000, -TMath::Pi()*boostFactor, TMath::Pi()*boostFactor);
    decayZ_vs_decayX_[i_stn] = new TH2D((stns[i_stn]+"_DecayZ_vs_DecayX").c_str(), ";Decay vertex position X [mm];Decay vertex position Z [mm]", 800, -8000, 8000, 800, -8000, 8000);

    // Slice momentum
    for ( int i_slice = 0; i_slice < nSlices; i_slice++ ) { 

      int lo = 0 + i_slice*step; 
      int hi = step + i_slice*step;

      // Store vertical offset correction fit
      TGraphErrors* gr_verticalOffsetFit = (TGraphErrors*)verticalOffsetCorrectionFile->Get(("MomBinnedAna/"+stns[i_stn]+"_ThetaY_vs_Time_Fit_"+std::to_string(lo)+"_"+std::to_string(hi)).c_str());
      //if(gr_verticalOffsetFit==0) verticalOffsetFitsPerStn_.push_back(0);
      verticalOffsetFitsPerStn_.push_back(gr_verticalOffsetFit->GetFunction("DoubleExponentialFunc"));

      TH2D *h_thetaY_vs_time_mod_slice = new TH2D((stns[i_stn]+"_ThetaY_vs_Time_Modulo_"+std::to_string(lo)+"_"+std::to_string(hi)).c_str(), ";t_{g#minus2}^{mod} [#mus]; #theta_{y} [mrad] / 149.2 ns", 29, 0, g2Period, 1000, -TMath::Pi()*boostFactor, TMath::Pi()*boostFactor);
      thetaY_vs_time_mod_slices_[i_stn].push_back(h_thetaY_vs_time_mod_slice);

      TH2D *h_thetaY_vs_time_mod_50ns_slice = new TH2D((stns[i_stn]+"_ThetaY_vs_Time_Modulo_50ns_"+std::to_string(lo)+"_"+std::to_string(hi)).c_str(), ";t_{g#minus2}^{mod} [#mus]; #theta_{y} [mrad] / 50 ns", 87, 0, g2Period, 1000, -TMath::Pi()*boostFactor, TMath::Pi()*boostFactor);
      thetaY_vs_time_mod_50ns_slices_[i_stn].push_back(h_thetaY_vs_time_mod_50ns_slice);

      TH2D *h_thetaY_vs_time_mod_long_slice = new TH2D((stns[i_stn]+"_ThetaY_vs_Time_Modulo_Long_"+std::to_string(lo)+"_"+std::to_string(hi)).c_str(), ";t_{g#minus2}^{mod} [#mus]; #theta_{y} [mrad] / 149.2 ns", 29*moduloMultiple, 0, g2Period*moduloMultiple, 1000, -TMath::Pi()*boostFactor, TMath::Pi()*boostFactor);
      thetaY_vs_time_mod_long_slices_[i_stn].push_back(h_thetaY_vs_time_mod_long_slice);

      TH2D *h_thetaY_vs_time_mod_long_50ns_slice = new TH2D((stns[i_stn]+"_ThetaY_vs_Time_Modulo_Long_50ns_"+std::to_string(lo)+"_"+std::to_string(hi)).c_str(), ";t_{g#minus2}^{mod} [#mus]; #theta_{y} [mrad] / 50 ns", 87*moduloMultiple, 0, g2Period*moduloMultiple, 1000, -TMath::Pi()*boostFactor, TMath::Pi()*boostFactor);
      thetaY_vs_time_mod_long_50ns_slices_[i_stn].push_back(h_thetaY_vs_time_mod_long_50ns_slice);

      TH1D *h_thetaY_mom_slice = new TH1D((stns[i_stn]+"_ThetaY_"+std::to_string(lo)+"_"+std::to_string(hi)).c_str(), ";#theta_{y} [mrad];Tracks",  500, -TMath::Pi()*boostFactor, TMath::Pi()*boostFactor);
      thetaY_mom_slices_[i_stn].push_back(h_thetaY_mom_slice);

      TH1D *h_Y_mom_slice = new TH1D((stns[i_stn]+"_Y_"+std::to_string(lo)+"_"+std::to_string(hi)).c_str(), ";Vertical decay position [mm];Tracks",  180, -60, 60);
      Y_mom_slices_[i_stn].push_back(h_Y_mom_slice);

      TH1D *h_pY_mom_slices = new TH1D((stns[i_stn]+"_MomentumY_"+std::to_string(lo)+"_"+std::to_string(hi)).c_str(), ";Track momentum Y MeV];Tracks",  1000, -60, 60);
      pY_mom_slices_[i_stn].push_back(h_pY_mom_slices);

      TH1D *h_p_mom_slices = new TH1D((stns[i_stn]+"_Momentum_"+std::to_string(lo)+"_"+std::to_string(hi)).c_str(), ";Track momentum [MeV];Tracks",  int(pmax), 0, pmax);
      p_mom_slices_[i_stn].push_back(h_p_mom_slices);

    }

    verticalOffsetFits_.push_back(verticalOffsetFitsPerStn_);

  }

  // Get branches (using header file)
  InitBranches br(tree);

  double targetPerc = 0;
  int64_t nEntries = tree->GetEntries();

  double muAngleMax = 0;

  int64_t counter = 0;

  // For FR randomisation
  TRandom3 *rand = new TRandom3(12345);
   
  for(int64_t entry = 0; entry < nEntries; entry++) {

    tree->GetEntry(entry);

    // quality variables
    double time = br.decayTime * 1e-3; // ns -> us
    if(timeRandomisation) time = RandomisedTime(rand, time); // randomise out the FR

    double x = br.decayVertexPosX; double y = br.decayVertexPosY; double z = br.decayVertexPosZ; 
    double px = br.decayVertexMomX; double py = -br.decayVertexMomY; double pz = br.decayVertexMomZ; 

    bool hitVol = br.hitVolume;
    double pVal = br.trackPValue;
    bool vertexQual = br.passDecayVertexQuality;

    // Time cuts
    if (quality) {

      if (time < g2Period*7 || time > g2Period*72) continue; 
      if (!vertexQual) continue;

    }

    int stn = br.station; 

    // Positron world momentum
    TVector3 eMom(px, py, pz); 
    TVector3 ePos(x, y, z);

    double g2ModTime = ModTime(time);
    double longModTime = ModTime(time, moduloMultiple);
      
    /////////////////////////////////
    //                             //
    // Define the vertical angle   //
    //                             //
    /////////////////////////////////

    double p = eMom.Mag();

    // If the you have the vertex cut switched on, py must be negative
    double theta_y = asin(py/p);
    theta_y = theta_y * 1e3;

    // End of variable definitions.
    ////////////////////////////////////////////////////////////////////////////////////////////////

    // All stations 
    int stn_id = 0;

    // Vertical offset correction
    TF1 *verticalOffsetCorrectionFunc; 

    if(verticalOffsetCorrection) {

      // Slice momentum 
      for ( int i_slice = 0; i_slice < nSlices; i_slice++) { 

        int lo = 0 + i_slice*step; 
        int hi = step + i_slice*step;

        if(p >= double(lo) && p < double(hi)) {

          verticalOffsetCorrectionFunc = (verticalOffsetFits_.at(stn_id)).at(i_slice);

        }

      }

      if(verticalOffsetCorrectionFunc != 0) theta_y = theta_y - verticalOffsetCorrectionFunc->Eval(time);

    }


    decayZ_vs_decayX_[stn_id]->Fill(x, z);

    // g-2 cuts. See Fienberg thesis figure 2.10
    if(p > 1900  && p < pmax) {
      wiggle_[stn_id]->Fill(time);
      wiggle_mod_[stn_id]->Fill(g2ModTime);
      // For some reason this is required.
      if(time > 8*g2Period) wiggle_mod_long_[stn_id]->Fill(longModTime);
    } 

    momY_[stn_id]->Fill(py);
    momX_[stn_id]->Fill(px);
    momZ_[stn_id]->Fill(pz);

    // EDM cuts
    if( quality && p > pLo && p < pHi) { 
      //1625 2500

      momentum_[stn_id]->Fill(p);
      thetaY_[stn_id]->Fill(theta_y);
      thetaY_vs_time_[stn_id]->Fill(time, theta_y);
      thetaY_vs_time_50ns_[stn_id]->Fill(time, theta_y);
      thetaY_vs_time_mod_[stn_id]->Fill(g2ModTime, theta_y);
      thetaY_vs_time_mod_50ns_[stn_id]->Fill(g2ModTime, theta_y);

      if(time > 8*g2Period) {
        thetaY_vs_time_mod_long_[stn_id]->Fill(longModTime, theta_y);
        thetaY_vs_time_mod_long_50ns_[stn_id]->Fill(longModTime, theta_y);    
      }  

    } else if(!quality) { 

      momentum_[stn_id]->Fill(p);
      thetaY_[stn_id]->Fill(theta_y);
      thetaY_vs_time_[stn_id]->Fill(time, theta_y);
      thetaY_vs_time_50ns_[stn_id]->Fill(time, theta_y);
      thetaY_vs_time_mod_[stn_id]->Fill(g2ModTime, theta_y);
      thetaY_vs_time_mod_50ns_[stn_id]->Fill(g2ModTime, theta_y);
      thetaY_vs_time_mod_long_[stn_id]->Fill(longModTime, theta_y);
      thetaY_vs_time_mod_long_50ns_[stn_id]->Fill(longModTime, theta_y);  

    }

    // Slice momentum 
    for ( int i_slice = 0; i_slice < nSlices; i_slice++ ) { 

      int lo = 0 + i_slice*step; 
      int hi = step + i_slice*step;

      if(p >= double(lo) && p < double(hi)) { 

        thetaY_vs_time_mod_slices_[stn_id].at(i_slice)->Fill(g2ModTime, theta_y);
        thetaY_vs_time_mod_50ns_slices_[stn_id].at(i_slice)->Fill(g2ModTime, theta_y);
        if(time > 8*g2Period) {
          thetaY_vs_time_mod_long_slices_[stn_id].at(i_slice)->Fill(longModTime, theta_y);
          thetaY_vs_time_mod_long_50ns_slices_[stn_id].at(i_slice)->Fill(longModTime, theta_y);
        }
        // Other scans 
        thetaY_mom_slices_[stn_id].at(i_slice)->Fill(theta_y);
        Y_mom_slices_[stn_id].at(i_slice)->Fill(y);
        pY_mom_slices_[stn_id].at(i_slice)->Fill(py);
        p_mom_slices_[stn_id].at(i_slice)->Fill(p);
        //alpha_mom_slices_[stn_id].at(i_slice)->Fill(alpha);

      }

    }

    ////////////////////////////////////////////////////////////////////////////////////////////////
    // Stn 12 or stn 18
    if(stn==12) stn_id = 1;
    else if(stn==18) stn_id = 2;
    else cerr<<"Station "<<stn<<" not recognised";

    // Vertical offset correction
    if(verticalOffsetCorrection) {

      // Reverse original correction
      if(verticalOffsetCorrectionFunc != 0) theta_y = theta_y + verticalOffsetCorrectionFunc->Eval(p);

      // Slice momentum 
      for ( int i_slice = 0; i_slice < nSlices; i_slice++) { 

        int lo = 0 + i_slice*step; 
        int hi = step + i_slice*step;

        if(p >= double(lo) && p < double(hi)) verticalOffsetCorrectionFunc = (verticalOffsetFits_.at(stn_id)).at(i_slice);

      }

      theta_y = theta_y - verticalOffsetCorrectionFunc->Eval(p);

    }
    

    decayZ_vs_decayX_[stn_id]->Fill(x, z);
 
    // g-2 cuts. See Fienberg thesis figure 2.10
    if(p > 1900  && p < pmax) {
      wiggle_[stn_id]->Fill(time);
      wiggle_mod_[stn_id]->Fill(g2ModTime);
      if(time > 8*g2Period) wiggle_mod_long_[stn_id]->Fill(longModTime);
    } 

    momY_[stn_id]->Fill(py);
    momX_[stn_id]->Fill(px);
    momZ_[stn_id]->Fill(pz);

    // EDM cuts
    if( quality && p > pLo && p < pHi) { 

      momentum_[stn_id]->Fill(p);
      thetaY_[stn_id]->Fill(theta_y);
      thetaY_vs_time_[stn_id]->Fill(time, theta_y);
      thetaY_vs_time_50ns_[stn_id]->Fill(time, theta_y);
      thetaY_vs_time_mod_[stn_id]->Fill(g2ModTime, theta_y);
      thetaY_vs_time_mod_50ns_[stn_id]->Fill(g2ModTime, theta_y);
      if(time > 8*g2Period) {
        thetaY_vs_time_mod_long_[stn_id]->Fill(longModTime, theta_y);
        thetaY_vs_time_mod_long_50ns_[stn_id]->Fill(longModTime, theta_y);    
      }  

    } else if(!quality) { 

      momentum_[stn_id]->Fill(p);
      thetaY_[stn_id]->Fill(theta_y);
      thetaY_vs_time_[stn_id]->Fill(time, theta_y);
      thetaY_vs_time_50ns_[stn_id]->Fill(time, theta_y);
      thetaY_vs_time_mod_[stn_id]->Fill(g2ModTime, theta_y);
      thetaY_vs_time_mod_50ns_[stn_id]->Fill(g2ModTime, theta_y);
      if(time > 8*g2Period) {
        thetaY_vs_time_mod_long_[stn_id]->Fill(longModTime, theta_y);
        thetaY_vs_time_mod_long_50ns_[stn_id]->Fill(longModTime, theta_y);    
      }  

    }

    // Slice momentum 
    for ( int i_slice = 0; i_slice < nSlices; i_slice++ ) { 

      int lo = 0 + i_slice*step; 
      int hi = step + i_slice*step;

      if(p >= double(lo) && p < double(hi)) { 

        thetaY_vs_time_mod_slices_[stn_id].at(i_slice)->Fill(g2ModTime, theta_y);
        thetaY_vs_time_mod_50ns_slices_[stn_id].at(i_slice)->Fill(g2ModTime, theta_y);
      
        if(time > 8*g2Period) {
          thetaY_vs_time_mod_long_slices_[stn_id].at(i_slice)->Fill(longModTime, theta_y);
          thetaY_vs_time_mod_long_50ns_slices_[stn_id].at(i_slice)->Fill(longModTime, theta_y);    
        }  
        // Other scans 
        thetaY_mom_slices_[stn_id].at(i_slice)->Fill(theta_y);
        Y_mom_slices_[stn_id].at(i_slice)->Fill(y);
        pY_mom_slices_[stn_id].at(i_slice)->Fill(py);
        p_mom_slices_[stn_id].at(i_slice)->Fill(p);
        //alpha_mom_slices_[stn_id].at(i_slice)->Fill(alpha);

      }

    }
      
/*    if(100*float(entry) / nEntries > targetPerc) {
      cout << Form("Processed %.1f%%", 100*float(entry)/nEntries) << endl;
      targetPerc += 10;
    }*/

  }

  // Write to output
  // Set output directory
  output->mkdir("MainPlots"); output->mkdir("MomSlices");  

  for (int i_stn = 0; i_stn < n_stn; i_stn++) { 

    output->cd("MainPlots");

    momentum_[i_stn]->Write();
    wiggle_[i_stn]->Write();
    wiggle_mod_[i_stn]->Write();
    wiggle_mod_long_[i_stn]->Write();
    thetaY_[i_stn]->Write();
    thetaY_vs_time_[i_stn]->Write();
    thetaY_vs_time_50ns_[i_stn]->Write(); 
    thetaY_vs_time_mod_[i_stn]->Write();
    thetaY_vs_time_mod_50ns_[i_stn]->Write();
    thetaY_vs_time_mod_long_[i_stn]->Write();
    thetaY_vs_time_mod_long_50ns_[i_stn]->Write();
    decayZ_vs_decayX_[i_stn]->Write();
    momX_[i_stn]->Write();
    momY_[i_stn]->Write();
    momZ_[i_stn]->Write();

   for ( int i_slice = 0; i_slice < nSlices; i_slice++ ) {

      output->cd("MomSlices"); 

      thetaY_vs_time_mod_slices_[i_stn].at(i_slice)->Write();
      thetaY_vs_time_mod_50ns_slices_[i_stn].at(i_slice)->Write();
      thetaY_vs_time_mod_long_slices_[i_stn].at(i_slice)->Write();
      thetaY_vs_time_mod_long_50ns_slices_[i_stn].at(i_slice)->Write();
      thetaY_mom_slices_[i_stn].at(i_slice)->Write();
      Y_mom_slices_[i_stn].at(i_slice)->Write();
      pY_mom_slices_[i_stn].at(i_slice)->Write();
      p_mom_slices_[i_stn].at(i_slice)->Write();
      
    }

  }

  cout<<"Written plots."<<endl;

  verticalOffsetCorrectionFile->Close();

  return;

}

int main() { // } int argc, char *argv[]) {

   bool quality = true;
   bool verticalOffsetCorrection = true;
/*   string inFileName = argv[1]; 
   string outFileName = argv[2]; 
   string dataset = argv[3];*/

   string inFileName = "/gm2/data/g2be/Production/Trees/Run1/trackRecoTrees_15921.root";
   string outFileName = "trackRecoPlots_15921.root";
   string dataset = "Run-1a";

   string treeName = "trackAndTrackCalo/tree"; //trackerNTup/tracker";

   // Open tree and load branches
   TFile *fin = TFile::Open(inFileName .c_str());
   // Get tree
   TTree *tree = (TTree*)fin->Get(treeName.c_str());

   cout<<"\nOpened tree:\t"<<treeName<<" "<<tree<<" from file "<<inFileName<<" "<<fin<<endl;

   // Book output

   TFile *fout = new TFile(outFileName.c_str(),"RECREATE");
   
   // Fill histograms
   Run(tree, fout, dataset, quality, verticalOffsetCorrection);

   // Close
   fout->Close();
   fin->Close();

   cout<<"\nDone. Histogram written to:\t"<<outFileName<<" "<<fout<<endl;
   
   return 0;

}
